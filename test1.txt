import requests
import json
import base64
import os
import xml.etree.ElementTree as ET
from datetime import datetime
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class WSO2APIManager:
    def __init__(self, base_url, username, password):
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password
        self.access_token = None
        self.session = requests.Session()
        self.session.verify = False
        
    def get_access_token(self):
        """Generate access token for API calls"""
        try:
            # First get client credentials for publisher app
            auth_header = base64.b64encode(f"{self.username}:{self.password}".encode()).decode()
            
            # Get access token using client credentials
            token_url = f"{self.base_url}/oauth2/token"
            headers = {
                'Authorization': f'Basic {auth_header}',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            data = {
                'grant_type': 'password',
                'username': self.username,
                'password': self.password,
                'scope': 'apim:api_view apim:api_create'
            }
            
            response = self.session.post(token_url, headers=headers, data=data)
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data.get('access_token')
                print(f"‚úÖ Access token obtained successfully")
                return True
            else:
                print(f"‚ùå Failed to get access token: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error getting access token: {str(e)}")
            return False
    
    def get_all_apis(self):
        """Get list of all APIs"""
        if not self.access_token:
            if not self.get_access_token():
                return []
        
        try:
            url = f"{self.base_url}/api/am/publisher/v3/apis"
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            all_apis = []
            offset = 0
            limit = 100
            
            while True:
                params = {'limit': limit, 'offset': offset}
                response = self.session.get(url, headers=headers, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    apis = data.get('list', [])
                    all_apis.extend(apis)
                    
                    # Check if we have more APIs to fetch
                    if len(apis) < limit:
                        break
                    offset += limit
                else:
                    print(f"‚ùå Failed to get APIs: {response.status_code} - {response.text}")
                    break
            
            print(f"üìä Found {len(all_apis)} total APIs")
            return all_apis
            
        except Exception as e:
            print(f"‚ùå Error getting APIs: {str(e)}")
            return []
    
    def get_api_details(self, api_id):
        """Get detailed information about a specific API"""
        try:
            url = f"{self.base_url}/api/am/publisher/v3/apis/{api_id}"
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            response = self.session.get(url, headers=headers)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå Failed to get API details for {api_id}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error getting API details: {str(e)}")
            return None
    
    def get_api_mediation_policies(self, api_id):
        """Get mediation policies for an API"""
        try:
            url = f"{self.base_url}/api/am/publisher/v3/apis/{api_id}/mediation-policies"
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            response = self.session.get(url, headers=headers)
            if response.status_code == 200:
                return response.json()
            else:
                return {'list': []}
                
        except Exception as e:
            print(f"‚ùå Error getting mediation policies: {str(e)}")
            return {'list': []}
    
    def download_mediation_policy(self, api_id, policy_id):
        """Download the content of a mediation policy"""
        try:
            url = f"{self.base_url}/api/am/publisher/v3/apis/{api_id}/mediation-policies/{policy_id}/content"
            headers = {
                'Authorization': f'Bearer {self.access_token}'
            }
            
            response = self.session.get(url, headers=headers)
            if response.status_code == 200:
                return response.text
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå Error downloading policy content: {str(e)}")
            return None
    
    def has_single_policy_across_resources(self, api_details):
        """Check if API has a single policy applied to all resources"""
        try:
            operations = api_details.get('operations', [])
            if not operations:
                return False, None
            
            # Get all unique operation policies
            policies = set()
            for operation in operations:
                operation_policies = operation.get('operationPolicies', {})
                
                # Check request policies
                request_policies = operation_policies.get('request', [])
                for policy in request_policies:
                    policy_name = policy.get('policyName', '')
                    if policy_name:
                        policies.add(policy_name)
                
                # Check response policies  
                response_policies = operation_policies.get('response', [])
                for policy in response_policies:
                    policy_name = policy.get('policyName', '')
                    if policy_name:
                        policies.add(policy_name)
            
            # If there's exactly one unique policy across all operations, it's a single policy API
            if len(policies) == 1:
                return True, list(policies)[0]
            elif len(policies) > 1:
                # Check if it's the same policy repeated
                policy_list = list(policies)
                if all(p == policy_list[0] for p in policy_list):
                    return True, policy_list[0]
            
            return False, None
            
        except Exception as e:
            print(f"‚ùå Error checking policy structure: {str(e)}")
            return False, None
    
    def analyze_and_download_policies(self, output_dir="downloaded_policies"):
        """Main function to analyze APIs and download single policies"""
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)
        
        # Get all APIs
        apis = self.get_all_apis()
        if not apis:
            print("‚ùå No APIs found or failed to retrieve APIs")
            return
        
        single_policy_apis = []
        results = {
            'total_apis': len(apis),
            'single_policy_apis': [],
            'download_results': []
        }
        
        print(f"\nüîç Analyzing {len(apis)} APIs for single policy pattern...")
        
        for i, api in enumerate(apis, 1):
            api_id = api.get('id')
            api_name = api.get('name', 'Unknown')
            api_version = api.get('version', '1.0.0')
            
            print(f"\n[{i}/{len(apis)}] Analyzing: {api_name} v{api_version}")
            
            # Get detailed API information
            api_details = self.get_api_details(api_id)
            if not api_details:
                continue
            
            # Check if it has single policy across all resources
            has_single_policy, policy_name = self.has_single_policy_across_resources(api_details)
            
            if has_single_policy:
                print(f"‚úÖ Found single policy API: {policy_name}")
                
                api_info = {
                    'api_id': api_id,
                    'api_name': api_name,
                    'api_version': api_version,
                    'policy_name': policy_name,
                    'context': api_details.get('context', ''),
                    'resources_count': len(api_details.get('operations', []))
                }
                
                single_policy_apis.append(api_info)
                results['single_policy_apis'].append(api_info)
                
                # Try to download mediation policies
                mediation_policies = self.get_api_mediation_policies(api_id)
                
                for policy in mediation_policies.get('list', []):
                    policy_id = policy.get('id')
                    policy_name_file = policy.get('name', 'unknown_policy')
                    policy_type = policy.get('type', 'unknown')
                    
                    # Download policy content
                    policy_content = self.download_mediation_policy(api_id, policy_id)
                    
                    if policy_content:
                        # Save policy to file
                        filename = f"{api_name}_v{api_version}_{policy_name_file}_{policy_type}.xml"
                        # Clean filename
                        filename = "".join(c for c in filename if c.isalnum() or c in (' ', '-', '_', '.')).rstrip()
                        filepath = os.path.join(output_dir, filename)
                        
                        try:
                            with open(filepath, 'w', encoding='utf-8') as f:
                                f.write(policy_content)
                            
                            print(f"üìÅ Downloaded policy: {filename}")
                            
                            results['download_results'].append({
                                'api_name': api_name,
                                'policy_name': policy_name_file,
                                'filename': filename,
                                'status': 'success'
                            })
                            
                        except Exception as e:
                            print(f"‚ùå Failed to save policy file: {str(e)}")
                            results['download_results'].append({
                                'api_name': api_name,
                                'policy_name': policy_name_file,
                                'filename': filename,
                                'status': f'failed: {str(e)}'
                            })
            else:
                print(f"‚è≠Ô∏è Skipping: Multiple or no policies found")
        
        # Generate summary report
        self.generate_report(results, output_dir)
        
        print(f"\nüéØ Analysis Complete!")
        print(f"üìä Total APIs analyzed: {results['total_apis']}")
        print(f"üéØ Single policy APIs found: {len(results['single_policy_apis'])}")
        print(f"üìÅ Policies downloaded: {len([r for r in results['download_results'] if r['status'] == 'success'])}")
        print(f"üìÇ Output directory: {output_dir}")
        
        return results
    
    def generate_report(self, results, output_dir):
        """Generate a detailed report of the analysis"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"policy_analysis_report_{timestamp}.json"
        report_path = os.path.join(output_dir, report_filename)
        
        # Add timestamp to results
        results['analysis_timestamp'] = datetime.now().isoformat()
        results['wso2_version'] = '4.2'
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            
            print(f"üìã Report generated: {report_filename}")
            
            # Also generate a CSV summary
            csv_filename = f"single_policy_apis_{timestamp}.csv"
            csv_path = os.path.join(output_dir, csv_filename)
            
            with open(csv_path, 'w', encoding='utf-8') as f:
                f.write("API Name,Version,Policy Name,Context,Resources Count,API ID\n")
                for api in results['single_policy_apis']:
                    f.write(f"\"{api['api_name']}\",\"{api['api_version']}\",\"{api['policy_name']}\",\"{api['context']}\",{api['resources_count']},\"{api['api_id']}\"\n")
            
            print(f"üìä CSV summary: {csv_filename}")
            
        except Exception as e:
            print(f"‚ùå Failed to generate report: {str(e)}")

def main():
    # Configuration
    WSO2_BASE_URL = "https://localhost:9443"  # Change to your WSO2 URL
    USERNAME = "admin"  # Change to your username
    PASSWORD = "admin"  # Change to your password
    OUTPUT_DIR = "wso2_single_policies"  # Output directory for downloaded policies
    
    print("üöÄ WSO2 API Manager 4.2 - Single Policy Extractor")
    print("=" * 60)
    
    # Initialize WSO2 API Manager client
    wso2_client = WSO2APIManager(WSO2_BASE_URL, USERNAME, PASSWORD)
    
    # Run analysis and download policies
    try:
        results = wso2_client.analyze_and_download_policies(OUTPUT_DIR)
        
        if results:
            print("\n‚úÖ Script completed successfully!")
            print(f"Check the '{OUTPUT_DIR}' directory for downloaded policies and reports.")
        else:
            print("\n‚ùå Script completed with errors.")
            
    except Exception as e:
        print(f"\n‚ùå Script failed with error: {str(e)}")

if __name__ == "__main__":
    main()
