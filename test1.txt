#!/usr/bin/env python3
"""
WSO2 API Manager 4.2 - Policy Endpoint Extractor
Basic Authentication Only - Fixed Version
"""

import requests
import json
import base64
import os
from datetime import datetime
import urllib3
import zipfile
import gzip
import io
import csv
import sys
import re
import yaml

def create_config():
    config = {
        "publisher_url": "https://localhost:9443",
        "username": "admin",
        "password": "admin",
        "verify_ssl": False,
        "output_csv": "wso2_policy_endpoints.csv",
        "instructions": {
            "publisher_url": "WSO2 API Manager base URL",
            "username": "WSO2 username with admin/publisher access",
            "password": "WSO2 password",
            "verify_ssl": "Set to false for self-signed certificates"
        }
    }
    
    with open("policy_config.json", 'w') as f:
        json.dump(config, f, indent=4)
    print("Config file created: policy_config.json")
    print("Please update with your WSO2 details")

class WSO2APIManager:
    def __init__(self):
        with open("policy_config.json", 'r') as f:
            self.config = json.load(f)
        
        self.base_url = self.config['publisher_url'].rstrip('/')
        self.username = self.config['username']
        self.password = self.config['password']
        self.verify_ssl = self.config.get('verify_ssl', True)
        
        self.session = requests.Session()
        self.session.verify = self.verify_ssl
        
        if not self.verify_ssl:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # Use basic authentication only
        auth_header = base64.b64encode(f"{self.username}:{self.password}".encode()).decode()
        self.auth_header = f"Basic {auth_header}"
        
        self.publisher_url = f"{self.base_url}/api/am/publisher/v4"
        print("Using Basic Authentication")
    
    def get_api_headers(self):
        return {
            'Authorization': self.auth_header,
            'Content-Type': 'application/json'
        }
    
    def get_all_apis(self):
        try:
            url = f"{self.publisher_url}/apis"
            headers = self.get_api_headers()
            
            all_apis = []
            offset = 0
            limit = 500  # Increased limit to get more APIs per request
            
            while True:
                params = {'limit': limit, 'offset': offset}
                response = self.session.get(url, headers=headers, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    apis = data.get('list', [])
                    all_apis.extend(apis)
                    
                    print(f"Retrieved {len(apis)} APIs (offset: {offset})")
                    
                    # Check if we have more APIs to fetch
                    if len(apis) < limit:
                        break
                    offset += limit
                else:
                    print(f"Failed to get APIs: {response.status_code} - {response.text}")
                    break
            
            print(f"Total APIs found: {len(all_apis)}")
            return all_apis
        except Exception as e:
            print(f"Error getting APIs: {str(e)}")
            return []
    
    def get_api_details(self, api_id):
        try:
            url = f"{self.publisher_url}/apis/{api_id}"
            headers = self.get_api_headers()
            response = self.session.get(url, headers=headers)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Failed to get API details for {api_id}: {response.status_code}")
                return None
        except Exception as e:
            print(f"Error getting API details for {api_id}: {str(e)}")
            return None
    
    def get_mediation_policies(self, api_id):
        try:
            url = f"{self.publisher_url}/apis/{api_id}/mediation-policies"
            headers = self.get_api_headers()
            response = self.session.get(url, headers=headers)
            
            if response.status_code == 200:
                return response.json()
            return {'list': []}
        except Exception as e:
            return {'list': []}
    
    def get_operation_policy_content(self, api_id, policy_id):
        try:
            url = f"{self.publisher_url}/apis/{api_id}/operation-policies/{policy_id}/content"
            response = self.session.get(url, headers=self.get_api_headers())
            if response.status_code == 200:
                return response.content
            return None
        except Exception as e:
            return None
    
    def download_mediation_policy(self, api_id, policy_id):
        try:
            url = f"{self.publisher_url}/apis/{api_id}/mediation-policies/{policy_id}/content"
            headers = self.get_api_headers()
            response = self.session.get(url, headers=headers)
            
            if response.status_code == 200:
                return response.text
            return None
        except Exception as e:
            return None
    
    def decompress_policy_content(self, compressed_content):
        try:
            with zipfile.ZipFile(io.BytesIO(compressed_content)) as zip_file:
                file_list = zip_file.namelist()
                
                # Look for YAML files first (contains parameters)
                for filename in file_list:
                    if filename.endswith('.yaml') or filename.endswith('.yml'):
                        with zip_file.open(filename) as file:
                            content = file.read().decode('utf-8')
                            print(f"Found YAML file: {filename}")
                            return content
                
                # Then look for j2 files
                for filename in file_list:
                    if filename.endswith('.j2'):
                        with zip_file.open(filename) as file:
                            return file.read().decode('utf-8')
                
                # Then XML files
                for filename in file_list:
                    if filename.endswith('.xml'):
                        with zip_file.open(filename) as file:
                            return file.read().decode('utf-8')
                
                # Get first file if no specific types found
                if file_list:
                    with zip_file.open(file_list[0]) as file:
                        return file.read().decode('utf-8')
        except zipfile.BadZipFile:
            pass
        except Exception as e:
            print(f"ZIP extraction error: {str(e)}")
        
        try:
            decompressed = gzip.decompress(compressed_content)
            return decompressed.decode('utf-8')
        except Exception:
            pass
        
        try:
            return compressed_content.decode('utf-8')
        except Exception:
            pass
        
        return None
    
    def download_operation_policy_content(self, api_id, policy_id):
        try:
            compressed_content = self.get_operation_policy_content(api_id, policy_id)
            if compressed_content:
                return self.decompress_policy_content(compressed_content)
            return None
        except Exception as e:
            return None
    
    def extract_roothost_from_policy_content(self, policy_content, policy_name):
        if not policy_content:
            return "", "no_content"
        
        try:
            roothost_value = ""
            endpoint_type = "unknown"
            
            # Check if this is the specific rootHost policy
            if "1VitalitySetRootHostAllMANDATORY" in policy_name or "rootHost" in policy_name:
                print(f"Processing rootHost policy: {policy_name}")
                
                # Look for YAML parameters section
                if 'parameters:' in policy_content or 'roothost:' in policy_content.lower():
                    try:
                        # Try to parse as YAML
                        yaml_content = yaml.safe_load(policy_content)
                        if isinstance(yaml_content, dict):
                            # Look for parameters section
                            if 'parameters' in yaml_content:
                                params = yaml_content['parameters']
                                if 'roothost' in params:
                                    roothost_value = params['roothost']
                                    endpoint_type = "operation_policy_yaml_roothost"
                                    print(f"Found YAML roothost parameter: {roothost_value}")
                                    return roothost_value.strip(), endpoint_type
                    except yaml.YAMLError:
                        pass
                    
                    # Try regex patterns for YAML format
                    yaml_patterns = [
                        r'parameters:\s*\n\s*roothost:\s*([^\n\r]+)',
                        r'roothost:\s*([^\n\r]+)',
                        r'rootHost:\s*([^\n\r]+)',
                    ]
                    
                    for pattern in yaml_patterns:
                        matches = re.findall(pattern, policy_content, re.IGNORECASE | re.MULTILINE)
                        if matches:
                            roothost_value = matches[0].strip()
                            endpoint_type = "operation_policy_yaml_roothost"
                            print(f"Found YAML roothost with regex: {roothost_value}")
                            return roothost_value.strip(), endpoint_type
            
            # Pattern 1: XML property format
            roothost_property_patterns = [
                r'<property[^>]*name=["\']rootHost["\'][^>]*value=["\']([^"\']+)["\']',
                r'<property[^>]*name=["\']roothost["\'][^>]*value=["\']([^"\']+)["\']',
                r'<property[^>]*name=["\']root_host["\'][^>]*value=["\']([^"\']+)["\']',
            ]
            
            for pattern in roothost_property_patterns:
                matches = re.findall(pattern, policy_content, re.IGNORECASE | re.DOTALL)
                if matches:
                    roothost_value = matches[0]
                    endpoint_type = "operation_policy_xml_property"
                    print(f"Found XML rootHost property: {roothost_value}")
                    break
            
            # Pattern 2: Template variables
            if not roothost_value:
                template_patterns = [
                    r'\{\{([^}]*[Rr]oot[Hh]ost[^}]*)\}\}',
                    r'\{\{([^}]*[Hh]ost[^}]*)\}\}',
                    r'\{\{([^}]*[Ee]ndpoint[^}]*)\}\}',
                    r'\$\{([^}]*[Rr]oot[Hh]ost[^}]*)\}',
                    r'\$\{([^}]*[Hh]ost[^}]*)\}',
                ]
                
                for pattern in template_patterns:
                    matches = re.findall(pattern, policy_content, re.IGNORECASE)
                    if matches:
                        match = matches[0]
                        if 'roothost' in match.lower() or 'host' in match.lower():
                            if '{{' in policy_content:
                                roothost_value = f"{{{{{match}}}}}"
                            else:
                                roothost_value = f"${{{match}}}"
                            endpoint_type = "operation_policy_template"
                            print(f"Found template variable: {roothost_value}")
                            break
                    if roothost_value:
                        break
            
            # Pattern 3: Hardcoded URLs
            if not roothost_value:
                url_patterns = [
                    r'<address\s+uri=["\']([^"\']+)["\']',
                    r'<endpoint[^>]*>.*?<address[^>]+uri=["\']([^"\']+)["\']',
                    r'<property[^>]*value=["\']([^"\']*https?://[^"\']+)["\']',
                ]
                
                for pattern in url_patterns:
                    matches = re.findall(pattern, policy_content, re.IGNORECASE | re.DOTALL)
                    if matches:
                        roothost_value = matches[0]
                        endpoint_type = "operation_policy_hardcoded"
                        print(f"Found hardcoded URL: {roothost_value}")
                        break
            
            return roothost_value.strip(), endpoint_type
            
        except Exception as e:
            print(f"Error extracting roothost from {policy_name}: {str(e)}")
            return "", "extraction_error"
    
    def analyze_api(self, api_id, api_name, api_version):
        results = []
        
        try:
            api_details = self.get_api_details(api_id)
            if not api_details:
                return results
            
            # Get backend endpoint
            backend_url = ""
            has_backend_conf = False
            backend_endpoints = api_details.get('endpointConfig', {})
            if backend_endpoints:
                production_endpoints = backend_endpoints.get('production_endpoints', {})
                if production_endpoints:
                    backend_url = production_endpoints.get('url', '')
                    has_backend_conf = bool(backend_url)
            
            operations = api_details.get('operations', [])
            
            if not operations:
                results.append({
                    'api_id': api_id,
                    'api_name': api_name,
                    'api_version': api_version,
                    'api_context': api_details.get('context', ''),
                    'resource_path': 'N/A',
                    'resource_method': 'N/A',
                    'current_endpoint': backend_url,
                    'new_endpoint': backend_url,
                    'endpoint_type': 'no_operations',
                    'api_type': 'no_operations_defined',
                    'policy_name': 'N/A',
                    'policy_attribute': 'N/A',
                    'operation_policy_count': 0,
                    'has_backend_conf': has_backend_conf,
                    'has_policy_parameter': False
                })
                return results
            
            # Get all unique policies for this API first
            api_policies = {}
            
            # Check operation policies
            for operation in operations:
                operation_policies = operation.get('operationPolicies', {})
                request_policies = operation_policies.get('request', [])
                response_policies = operation_policies.get('response', [])
                all_operation_policies = request_policies + response_policies
                
                for policy in all_operation_policies:
                    policy_id = policy.get('policyId', '')
                    policy_name = policy.get('policyName', '')
                    if policy_id and policy_id not in api_policies:
                        policy_content = self.download_operation_policy_content(api_id, policy_id)
                        roothost_value, endpoint_type = self.extract_roothost_from_policy_content(policy_content, policy_name)
                        
                        api_policies[policy_id] = {
                            'policy_name': policy_name,
                            'policy_attribute': 'operation_policy',
                            'roothost_value': roothost_value,
                            'endpoint_type': endpoint_type,
                            'has_parameters': bool('parameter' in str(policy_content).lower() if policy_content else False)
                        }
            
            # Check mediation policies
            mediation_policies = self.get_mediation_policies(api_id)
            for policy in mediation_policies.get('list', []):
                policy_id = policy.get('id', '')
                policy_name = policy.get('name', '')
                if policy_id and policy_id not in api_policies:
                    policy_content = self.download_mediation_policy(api_id, policy_id)
                    roothost_value, endpoint_type = self.extract_roothost_from_policy_content(policy_content, policy_name)
                    
                    api_policies[policy_id] = {
                        'policy_name': policy_name,
                        'policy_attribute': 'mediation_policy',
                        'roothost_value': roothost_value,
                        'endpoint_type': endpoint_type,
                        'has_parameters': bool('parameter' in str(policy_content).lower() if policy_content else False)
                    }
            
            # If no policies found, create one record for the API
            if not api_policies:
                results.append({
                    'api_id': api_id,
                    'api_name': api_name,
                    'api_version': api_version,
                    'api_context': api_details.get('context', ''),
                    'resource_path': f"{len(operations)} resources",
                    'resource_method': 'ALL',
                    'current_endpoint': backend_url,
                    'new_endpoint': backend_url,
                    'endpoint_type': 'backend_config' if backend_url else 'no_endpoint',
                    'api_type': 'backend_endpoint_based' if backend_url else 'no_endpoint_configured',
                    'policy_name': 'N/A',
                    'policy_attribute': 'N/A',
                    'operation_policy_count': 0,
                    'has_backend_conf': has_backend_conf,
                    'has_policy_parameter': False
                })
            else:
                # Create one record per unique policy
                for policy_id, policy_info in api_policies.items():
                    endpoint_value = policy_info['roothost_value'] if policy_info['roothost_value'] else backend_url
                    
                    # Determine API type
                    if 'roothost' in policy_info['endpoint_type']:
                        api_type = "operation_policy_based"
                        final_endpoint_type = "operation_policy_roothost"
                    elif 'template' in policy_info['endpoint_type']:
                        api_type = "operation_policy_based"
                        final_endpoint_type = "operation_policy_template"
                    elif 'hardcoded' in policy_info['endpoint_type']:
                        api_type = "operation_policy_based"
                        final_endpoint_type = "operation_policy_hardcoded"
                    elif policy_info['policy_attribute'] == 'mediation_policy':
                        api_type = "mediation_policy_based"
                        final_endpoint_type = "mediation_policy"
                    else:
                        api_type = "policy_based"
                        final_endpoint_type = policy_info['endpoint_type']
                    
                    results.append({
                        'api_id': api_id,
                        'api_name': api_name,
                        'api_version': api_version,
                        'api_context': api_details.get('context', ''),
                        'resource_path': f"{len(operations)} resources",
                        'resource_method': 'ALL',
                        'current_endpoint': endpoint_value,
                        'new_endpoint': endpoint_value,
                        'endpoint_type': final_endpoint_type,
                        'api_type': api_type,
                        'policy_name': policy_info['policy_name'],
                        'policy_attribute': policy_info['policy_attribute'],
                        'operation_policy_count': len(api_policies),
                        'has_backend_conf': has_backend_conf,
                        'has_policy_parameter': policy_info['has_parameters']
                    })
        
        except Exception as e:
            print(f"Error analyzing API {api_id}: {str(e)}")
            results.append({
                'api_id': api_id,
                'api_name': api_name,
                'api_version': api_version,
                'api_context': api_details.get('context', ''),
                'resource_path': 'ERROR',
                'resource_method': 'ERROR',
                'current_endpoint': '',
                'new_endpoint': '',
                'endpoint_type': 'analysis_error',
                'api_type': 'error',
                'policy_name': 'ERROR',
                'policy_attribute': 'ERROR',
                'operation_policy_count': 0,
                'has_backend_conf': False,
                'has_policy_parameter': False
            })
        
        return results
    
    def process_all_apis(self):
        try:
            all_apis = self.get_all_apis()
            if not all_apis:
                return []
            
            all_results = []
            total_apis = len(all_apis)
            
            print(f"Processing {total_apis} APIs...")
            
            for i, api in enumerate(all_apis, 1):
                api_id = api.get('id', '')
                api_name = api.get('name', 'Unknown')
                api_version = api.get('version', '1.0.0')
                
                print(f"[{i}/{total_apis}] Processing: {api_name}")
                
                api_results = self.analyze_api(api_id, api_name, api_version)
                all_results.extend(api_results)
            
            return all_results
        except Exception as e:
            print(f"Error processing APIs: {str(e)}")
            return []
    
    def save_to_csv(self, data, output_file):
        try:
            if not data:
                print("No data to save")
                return
            
            fieldnames = [
                'api_id', 'api_name', 'api_version', 'api_context', 'resource_path', 'resource_method',
                'current_endpoint', 'new_endpoint', 'endpoint_type', 'api_type', 'policy_name',
                'policy_attribute', 'operation_policy_count', 'has_backend_conf', 'has_policy_parameter'
            ]
            
            with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(data)
            
            print(f"Data saved to {output_file}")
        except Exception as e:
            print(f"Error saving CSV: {str(e)}")

def main():
    print("WSO2 API Manager 4.2 - Policy Endpoint Extractor")
    print("Basic Authentication Only")
    print("=" * 50)
    
    if len(sys.argv) > 1 and sys.argv[1] == "--create-config":
        create_config()
        return
    
    if not os.path.exists("policy_config.json"):
        print("Config file not found. Creating default...")
        create_config()
        print("Please update policy_config.json and run again")
        return
    
    try:
        client = WSO2APIManager()
        
        print(f"Connecting to: {client.base_url}")
        print(f"Username: {client.username}")
        
        data = client.process_all_apis()
        
        if data:
            output_file = client.config.get('output_csv', 'wso2_policy_endpoints.csv')
            client.save_to_csv(data, output_file)
            
            print(f"\nSUMMARY:")
            print(f"Total records: {len(data)}")
            print(f"Unique APIs: {len(set(d['api_id'] for d in data))}")
            
            operation_policies = [d for d in data if d.get('policy_attribute') == 'operation_policy']
            mediation_policies = [d for d in data if d.get('policy_attribute') == 'mediation_policy']
            roothost_policies = [d for d in data if 'roothost' in d.get('endpoint_type', '').lower()]
            
            print(f"Operation policies: {len(operation_policies)}")
            print(f"Mediation policies: {len(mediation_policies)}")
            print(f"RootHost policies found: {len(roothost_policies)}")
            
            if roothost_policies:
                print("\nRootHost policies:")
                for policy in roothost_policies[:5]:  # Show first 5
                    print(f"  - {policy['api_name']}: {policy['policy_name']} -> {policy['current_endpoint']}")
            
            print(f"Output file: {output_file}")
            print("\nCompleted successfully!")
        else:
            print("No data extracted. Check credentials and connectivity.")
    
    except Exception as e:
        print(f"Script failed: {str(e)}")

if __name__ == "__main__":
    main()
